from itertools import count
from band import dome, logger, app
import aiohttp
import asyncio
from prodict import Prodict
from random import randrange
from datetime import datetime

SEND = 'sendMessage'

reg = {'url': "https://bolt.rstat.org/rodinbot/main"}
token = settings.token
query_tmpl = 'https://api.telegram.org/bot{token}/{method}'
state = Prodict(num=0, chats=dict())
duration = 60 * 60

say_no = ['–ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç!', '–ì–æ–≤–Ω–∞ —Ä—É–ª–µ—Ç!', '–°–¥–µ–ª–∞–π –ø–∏–¥–æ—Ä—É –º–∏–Ω–µ—Ç!']
some = ['–±–ª—è...', '—É–µ–±–∫–∏', '–µ–±–∞–Ω—ã–π –≤ —Ä–æ—Ç', '–±–ª—è', '–µ–±–∞–Ω—ã–π –Ω–∞—Å–æ—Å!']


def rand_word(words):
    return words[randrange(0, len(words))]


def evenword(phrase, *words):
    for word in words:
        if word in phrase:
            return True


def allwords(phrase, *words):
    for w in words:
        if w in phrase:
            return True


def send_tg_msg(text, chat_id):
    return {
        'method': SEND,
        'chat_id': chat_id,
        'text': text}


def ts():
    return int(datetime.now().timestamp())


"""
–°–û–°–ò –•–£–ô –ù–ï –ü–°–ò–•–£–ô
–ü–û–î–ù–ò–ú–ò –û–ë–ï –†–£–ö–ò @ –ê –¢–ï–ü–ï–†–¨ –û–ü–£–°–¢–ò –¢–£, –ö–û–¢–û–†–û–ô –î–†–û–ß–ò–®–¨
–¢–í–û–ò –ì–£–ë–ö–ò –ü–û –ú–û–ï–ô –ó–ê–õ–£–ü–ö–ï
–•–£–Å–í –¢–ï–ë–ï –ü–ê–ù–ê–ú–£
–•–£–ô –ó–ê–í–ï–†–ù–£–¢–´–ô –í –ì–ê–ó–ï–¢–£ –ó–ê–ú–ï–ù–Ø–ï–¢ –°–ò–ì–ê–†–ï–¢–£
–∫–∞–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: –û–î–ò–ù –ï–ë–Å–¢–°–Ø, –î–†–£–ì–û–ô –î–†–ê–ó–ù–ò–¢–°–Ø
–®–£–¢–ö–ò –®–£–¢–ö–ê–ú–ò, –ê –ü–û–õ–•–£–Ø –í –ñ–ï–õ–£–î–ö–ï
–°–í–ò–°–¢–ù–ò –í –•–£–ô –¢–ê–ú –¢–û–ñ–ï –î–´–†–ö–ê
–ü–†–ò–°–ê–ñ–ò–í–ê–ô–¢–ï–°–¨
–Ø –ò–î–£ –ï–ë–ê–¢–¨ –ì–£–°–ï–ô
–¢–†–ê–•–ù–£–õ, –°–¢–ê–õ–û –í–ï–°–ï–õ–ï–ô
–ö–û–ì–î–ê –î–†–û–ß–ò–®–¨ –ß–ï –ë–û–†–ú–û–ß–ï–®–¨?
–û–¢–°–û–°–ò –ó–ê –£–ü–û–ö–û–ô
–¢–ê–ö–û–ú–£ –†–ê–°–°–ö–ê–ó–ß–ò–ö–£ –ó–ê–õ–£–ü–£ –ó–ê –©–ï–ö–£
"""


@dome.expose(role=dome.HANDLER)
async def main(data, **params):
    print(data, params)
    data = Prodict.from_dict(data)

    if data.message and data.message.text and data.message.chat:
        message = data.message
        chat = message.chat

        if chat.id < 0:
            state.chats[chat.id] = ts()

        phrase = message.text.lower().strip()

        def msg(text):
            return send_tg_msg(text, chat.id)

        def even(*words):
            return evenword(phrase, *words)

        def all(*words):
            return allwords(phrase, *words)

        if '–Ω–µ—Ç' in phrase and len(phrase) < 8:
            return msg(rand_word(say_no))

        if '–≥–¥–µ' in phrase and phrase.endswith('?'):
            return msg('—É —Ç–µ–±—è –≤ —à—Ç–∞–Ω–∞—Ö!')

        if even('–≥—Ä—É—Å—Ç—å', '–≥—Ä—É—Å—Ç–Ω—ã–π', '–ø–µ—á–∞–ª—å'):
            return msg('–ê —á–µ–≥–æ –≥—Ä—É—Å—Ç–Ω—ã–π? –•—É–π —Å–æ—Å–∞–ª –Ω–µ–≤–∫—É—Å–Ω—ã–π?')

        if even('–≤–µ—Å–µ–ª—ã–π', '–ª–æ–ª'):
            return msg('–ê —Ç—ã —á–µ —Ç–∞–∫–æ–π –≤–µ—Å–µ–ª—ã–π? –•—É–π —Å–æ—Å–∞–ª –≤–∏—à–Ω–µ–≤—ã–π?))')

        if even('üòÜ', 'üòÑ'):
            return msg('–ï–±–∞—Ç—å—Å—è —É–ª—ã–±–∞—Ç—å—Å—è)')

        if phrase.startswith('—è ') or even('—Ä–∞–∑–±–µ—Ä—É—Å—å.', '–ø–æ—Å–º–æ—Ç—Ä—é.'):
            return msg('–ê –∑–∞ –ø–∏–∑–¥—ë–∂ –≤ —Ä–æ—Ç –≤–æ–∑—å–º—ë—à—å?)')

        if even('–ø–æ–º–æ—á—å'):
            return msg('–ü–æ–º–æ—á—å? –•—É–π –¥–æ –∂–æ–ø—ã –¥–æ–≤–æ–ª–æ—á—å?)')

        if even('—Å–ø–æ—Ä'):
            return msg('–ö—Ç–æ —Å–ø–æ—Ä–∏—Ç, —Ç–æ—Ç –≥–æ–≤–Ω–∞ –Ω–µ —Å—Ç–æ–∏—Ç!')

        if even('–º–æ–ª–æ–¥–µ—Ü'):
            await app['scheduler'].spawn(send_good_boy(chat))

        if even('ü§¶', '–±–ª—è—è—è', '–Ω—É –µ–ø—Ç', '—É—Ö –µ–ø—Ç'):
            return msg('C–æ—Å–∏ —Ö—É–π –Ω–µ –ø—Å–∏—Ö—É–π')

        if even('–ø–æ–∫—É—Ä—é', '–∫—É—Ä–∏—Ç—å', '–ø–æ–∫—É—Ä–∏'):
            return msg('–•—É–π –∑–∞–≤–µ—Ä–Ω—É—Ç—ã–π –≤ –≥–∞–∑–µ—Ç—É –∑–∞–º–µ–Ω—è–µ—Ç —Å–∏–≥–∞—Ä–µ—Ç—É')

        if even('—Å–ø–∞—Ç—å'):
            return msg('–°—Ç–æ–π! –ø–æ–¥–Ω–∏–º–∏ –æ–±–µ —Ä—É–∫–∏, –∞ —Ç–µ–ø–µ—Ä—å –æ–ø—É—Å—Ç–∏ —Ç—É, –∫–æ—Ç–æ—Ä–æ–π –¥—Ä–æ—á–∏—à—å)')

        if even(', –Ω–æ', ',–Ω–æ'):
            return msg('–•—É–µ–≤ —Ç–µ–±–µ –ø–∞–Ω–∞–º—É!')

        if even('–ø–æ–µ–º', '–ø–µ—Ä–µ–∫—É—à—É', '–ø–æ–æ–±–µ–¥–∞—é', '–Ω–∞ –æ–±–µ–¥', '–∫—É—à–∞—Ç—å'):
            return msg('–®—É—Ç–∫–∏ —à—É—Ç–∫–∞–º–∏, –∞ –ø–æ–ª—Ö—É—è –≤ –∂–µ–ª—É–¥–∫–µ...')

        if even('—Å —Ç–æ–±–æ–π'):
            return msg('–û—Å—Ç–æ—Å–∏ –∑–∞ —É–ø–æ–∫–æ–π')

        if even('–µ–±–∞—Ç—å'):
            return msg('–¢—Ä–∞—Ö–Ω—É–ª, —Å—Ç–∞–ª–æ –≤–µ—Å–µ–ª–µ–π?')

        if even('–ø–∏–¥–æ—Ä'):
            return msg('–§—É –±–ª—è')

        if all('—Ç—ã', '–º–Ω–µ') or even('–∫–æ–Ω–µ—á–Ω–æ'):
            return msg('–ü—Ä–∏—Å–∞–∂–∏–≤–∞–π—Ç–µ—Å—å...')

    return {}


async def send_good_boy(chat):
    try:
        res = await query_url(SEND, msg('–ú–æ–ª–æ–¥–µ—Ü!'))
        await asyncio.sleep(3)
        res = await query_url(SEND, msg('–ê —á—Ç–æ –¥–µ–ª–∞—é—Ç –º–æ–ª–æ–¥—Ü—ã?'))
        await asyncio.sleep(3)
        res = await query_url(SEND, msg('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!'))
        await asyncio.sleep(1)
        res = await query_url(SEND, msg('–°–æ—Å—É—Ç –∫–æ–Ω—Ü—ã!'))
    except Exception:
        logger.exception('goodboy')


async def register(params):
    result = await query_url("setWebhook", {})
    result = await query_url("setWebhook", params)
    print(result)


@dome.expose(role=dome.HANDLER)
async def msg(data, **kwargs):
    msg = dict(chat_id=data.get('to'), text=data.get('text'))
    res = await query_url(SEND, msg)
    print(res)
    return {}


async def query_url(method, params={}):
    url = query_tmpl.format(token=token, method=method)
    async with aiohttp.ClientSession() as session:
        async with session.get(url, json=params) as r:
            return await r.json()


# Turet syndrome emulation
@dome.tasks.add
async def manager():
    await register(reg)
    for n in count():
        await asyncio.sleep(randrange(60*20, 60*30))
        keys = list(state.chats.keys())
        for chat_id in keys:
            last_msg = state.chats.pop(chat_id)
            if last_msg + duration < ts():
                send_tg_msg(rand_word(some), chat_id)
